
Built with help from Mike Zamansky's Youtube Tutorial

* Packages
** auto-package-update
#+BEGIN_SRC emacs-lisp
;; Auto update packages once a week
(use-package auto-package-update
  :ensure t
  :commands (auto-package-update-maybe)
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe)
  (add-hook 'auto-package-update-before-hook
          (lambda () (message "I will update packages now")))
  )
#+END_SRC

** trust melpa
#+BEGIN_SRC emacs-lisp
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
#+END_SRC


* Emacs meta
** Bind super key to command
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'super) 
(setq mac-option-modifier 'meta) 
(setq mac-control-modifier 'control) ; make Control key do Control
(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
#+END_SRC


* Basic Quality of Life
** Keyboard shortcut to open myinit.org
#+BEGIN_SRC emacs-lisp
  (defun init ()
    (interactive)
    (counsel-find-file "~/.emacs.d/myinit.org")
    )
#+END_SRC
** Set default directory
#+BEGIN_SRC emacs-lisp
(setq default-directory "/Users/samtonetto/")
#+END_SRC
** Inhibit startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** No toolbar at top
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** Change yes/no prompts to y/n prompts
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Enable clipboard pasting into emacs kill-ring
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC
** F5 to Reload buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
** Silence the Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function
      (lambda ()
        (let ((orig-fg (face-foreground 'mode-line)))
          (set-face-foreground 'mode-line "#F2804F")
          (run-with-idle-timer 0.1 nil
                               (lambda (fg) (set-face-foreground 'mode-line fg))
                               orig-fg))))
#+END_SRC
** Refine scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(10))
(setq mouse-wheel-progressive-speed nil) ; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't)       ; scroll window under mouse
(setq scroll-step 3)                     ; keyboard scroll 3 lines at a time
#+END_SRC
** which-key (List command completions)
If you type "C-x" or "C-c" and wait which-key will list possible command completions.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (setq which-key-idle-delay 0.1)
  (which-key-mode))
#+END_SRC
** Prevent accidental exiting
Quit with "C-x C-c C-x C-c" instead of "C-x C-c"
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-x C-c"))
  (global-set-key (kbd "C-x C-c C-x C-c") 'save-buffers-kill-emacs)
#+END_SRC

** helm-descbinds (describe all bindings with helm)
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds)
(helm-descbinds-mode)
#+END_SRC

** display-line-numbers-mode
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
#+END_SRC


* Shell
** Make emacs use same shell as OSX terminal
Make emacs use same shell that I use
with package ""exec-path-from-shell"

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
** Clear eshell
#+BEGIN_SRC emacs-lisp
;Clear the eshell buffer.
(defun eshell/clear ()      
   (let ((eshell-buffer-maximum-lines 0)) (eshell-truncate-buffer)))
#+END_SRC

** Set default ansi-term to zsh
#+BEGIN_SRC emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
#+END_SRC

** ansi-term char-mode/line-mode toggle
Reminder that C-c C-j go to line-mode
and that C-c C-k goes to char-mode

#+BEGIN_SRC emacs-lisp
  (defun clear-and-enter ()
    (interactive)
    (progn
      (erase-buffer)
      ;;      (term-send-input)
      (execute-kbd-macro (read-kbd-macro "<RET>"))
      ;;      (execute-kbd-macro (read-kbd-macro "C-l"))
      (term-char-mode)
      (execute-kbd-macro (read-kbd-macro "C-l"))
      )
    )

    (add-hook 'term-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c C-h") 'clear-and-enter)))
#+END_SRC

** Add brew compiler to path
#+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "/usr/local/bin")
#+END_SRC



* Window Navigation
** ace-window                                  (navigate windows by "C-x o <number>")
Switch between multiple windows using "C-x o" by number.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    ;;; this next bit customizes font
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC
** framemove [not patched for Emacs 27 yet]    (navigate windows by "shift <arrowkey>")
Use Shift + Arrowkeys to quickly switch windows.
#+BEGIN_SRC emacs-lisp
  (use-package framemove
    :ensure t
    :config
    (windmove-default-keybindings)
    (setq framemove-hook-into-windmove t)
    )
#+END_SRC

** window-numbering                            (navigate windows by "M-<number>")
#+BEGIN_SRC emacs-lisp
(use-package window-numbering
  :ensure t
  :config
  (eval-when-compile
    ;; Silence missing function warnings
    (declare-function window-numbering-mode "window-numbering.el"))
  (window-numbering-mode t)
  )
#+END_SRC


** window resizing keybindings
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-<") 'shrink-window-horizontally)
    (global-set-key (kbd "C->") 'enlarge-window-horizontally)
    (global-set-key (kbd "C-:") 'shrink-window)
    (global-set-key (kbd "C-\"") 'enlarge-window)
#+END_SRC


* Aesthetics
** Font
*** Font Face
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Inconsolata" :height 140)
#+END_SRC

*** Font Size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 150)
#+END_SRC

** Theme
*** Disable theme before loading new one
#+BEGIN_SRC emacs-lisp
(defadvice load-theme (before theme-dont-propagate activate)
 (mapc #'disable-theme custom-enabled-themes))
#+END_SRC
*** Load Dracula Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'dracula t)
(set-face-foreground 'font-lock-comment-face "light goldenrod") ;; change comments col
#+END_SRC

** Cursor
*** Cursor Style
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'box)  ; other options: bar, hollow, hbar
#+END_SRC

*** beacon                 (a light following your cursor around)
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    ;; Set beacon color with: (setq beacon-color ^#666)
    )
#+END_SRC


** color-identifiers-mode (color matching variables)
#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :ensure t
  :init (add-hook 'after-init-hook 'global-color-identifiers-mode))
#+END_SRC

** rainbow-delimiters     (color matching parentheses)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))


(set-face-attribute 'rainbow-delimiters-unmatched-face nil
                    :foreground 'unspecified
                    :inherit 'error
                    :strike-through t)
#+END_SRC

** global-hl-line-mode    (highlight current line)
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** powerline              (stylize bar at bottom)
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC


** Indentation guides     (mostly useful for python)

(currently turned off for c++-mode due to being slow)
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'highlight-indent-guides-mode)
;;(add-hook 'c++-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
(setq highlight-indent-guides-responsive 'top)
#+END_SRC


** rainbow-mode           (automatically color hex codes)
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
 :ensure t)

(add-hook 'web-mode-hook #'rainbow-mode)
(add-hook 'org-mode-hook #'rainbow-mode)

#+END_SRC


* Org Mode

** org-mode setup
#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)  ; indents nested bullet points
  (add-hook 'org-shiftup-hook 'windmove-up)              ; Shift + Up to move up a window
  (add-hook 'org-shiftleft-hook 'windmove-left)          ; Shift + Left to move to left window
  (add-hook 'org-shiftdown-hook 'windmove-down)          ; Shift + Down to move down a window
  (add-hook 'org-shiftright-hook 'windmove-right)        ; Shift + Right to move to right window
)
#+END_SRC


** org customize code block headers

#+BEGIN_SRC emacs-lisp
;;(setq org-fontify-whole-heading-line t)

(set-face-attribute 'org-meta-line nil 
		    :height 1.0
		    :slant 'oblique
		    :underline "#faebd7"
		    :foreground "#ffaaff"
		    :background "#000000"
		    :extend t)

(setq org-src-fontify-natively t)
#+END_SRC


** org-bullets (aesthetic bullet points)
Shows org-mode bullets as UTF-8 characters instead of asterisks.
Only works in GUI emacs - may not work in terminal.

#+BEGIN_SRC emacs-lisp
;;(use-package org-bullets
;;  :ensure t
;;  :config
;;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC


** protect org-mode from itself
#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'smart)
(setq org-ctrl-k-protect-subtree t)
#+END_SRC


** preserve indents after exiting org edit mode
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)
#+END_SRC


** load languages for use in org-mode code  blocks

Note: if you get a python-shell-interpreter readline error,
add this to your ~/.inputrc file without quotes:

"# .inputrc
$if Bash
set colored-stats on
$endif"

If you don't have an .inputrc file, make one.

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "/usr/local/bin/python3")

(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)
     (C . t)
     (emacs-lisp . t))))

(add-to-list 'org-src-lang-modes '("html" . web))

#+END_SRC



** images

To display an image in org-mode, you can first of all optionally include
any number of the following properties in the lines just before the image:

#+NAME: fig:figure name
#+CAPTION: figure name
#+ATTR_ORG: :width 200
#+ATTR_LATEX: :width 2.0in
#+ATTR_HTML: :width 200

Then, to include the image, 
1. write a "[" twice, then 
2. write file:<path to image>
3. write "]" twice. 
This creates a hyperlink to the image.

To toggle displaying inline, use keybinding "C-c C-x C-v"

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(setq org-image-actual-width nil)
#+END_SRC


** Make source code blocks tabs natively
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC


* Latex
** AucTex path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))  
(setq exec-path (append exec-path '("/Library/TeX/texbin/")))
#+END_SRC


* Code Editing

** toggle fold triple slash comments

#+BEGIN_SRC emacs-lisp
(defvar triple-slash-comments-folded 0)

(defun toggle-fold-triple-slash-comments()
  (interactive)
  (cond
   ((= triple-slash-comments-folded 0)
    (hide-lines-matching "///*")
    (setq triple-slash-comments-folded 1)
    )
   ((= triple-slash-comments-folded 1)
    (hide-lines-show-all)
    (setq triple-slash-comments-folded 0)
    )
))

(define-key c-mode-base-map (kbd "C-'") 'toggle-fold-triple-slash-comments)
#+END_SRC


** clang-format
#+BEGIN_SRC emacs-lisp
;; Clang stuff
(require 'clang-format)
(setq clang-format-style "file")

(defun clang-format-save-hook-for-this-buffer ()
  "Create a buffer local save hook."
  (add-hook 'before-save-hook
    (lambda ()
      (progn
        (when (locate-dominating-file "." ".clang-format")
          (clang-format-buffer))
        ;; Continue to save.
        nil))
    nil
    ;; Buffer local hook.
    t))

;; Run this for each mode you want to use the hook.
(add-hook 'c-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))
(add-hook 'c++-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))
#+END_SRC


** Add to C++ mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tpp" . c++-mode))
#+END_SRC


** yasnippet

Configured so that <backtab> (i.e. Shift+Tab) expands snippets recursively, and
<tab> just moves to next field.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))

;; Set key to backtab

(setq yas-triggers-in-field t)

;; Note:
;; yas-keymap is the active keymap while a snippet expansion is in progress
;; in contrast to yas-minor-mode-map, which is the keymap outside of snippet expansion.

(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "<backtab>") yas-maybe-expand)
(define-key yas-minor-mode-map (kbd "<S-tab>") yas-maybe-expand)
(define-key yas-keymap (kbd "<backtab>") yas-maybe-expand)
(define-key yas-keymap (kbd "<S-tab>") yas-maybe-expand)
#+END_SRC


** vimish fold

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :ensure t
  :config
  (progn
    (vimish-fold-global-mode 1)
    (global-set-key (kbd "C-M-x") #'vimish-fold)
    (global-set-key (kbd "C-M-d") #'vimish-fold-delete)
    (global-set-key (kbd "C-M-c") #'vimish-fold-toggle)
    (global-set-key (kbd "C-M-f") #'vimish-fold-toggle-all)
    ))
#+END_SRC


** Set default indent to 4
#+BEGIN_SRC emacs-lisp
(setq c-default-style "bsd"
        c-basic-offset 4)
#+END_SRC








** electric pair mode
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC


** hide-ifdef-mode shadow text instead of hiding
#+BEGIN_SRC emacs-lisp
(setq hide-ifdef-shadow t)
#+END_SRC


** helm-swoop and helm-ag text replacemenent workflow

*** Find-replace text in all subdirectories with helm-ag
1. Type "M-x helm-ag" (requires helm-ag)
2. Type the text pattern to search for
3. Type "C-c C-e" to enter edit mode
4. Select region to edit and then use  
   iedit to simultaneously edit text 
   (hotkey should be C-;)
5. Type "C-c C-c" to commit changes to files 
   (i.e. save changes)

*** Find-replace text in open buffers with helm-swoop
1. Select text in current buffer
2. Use shortcut "M-i" or type "M-x helm-swoop"
3. This will list all occurrences in current buffer
   If you want occurrences in every open buffer, press
   "M-i" again.
   - Now, you can navigate through all occurrences with 
     "C-r" and "C-s" if you wish.
4. Type "C-c C-e" to enter edit mode.
5. Select region to edit and then use iedit to 
   simultaneously edit text (hotkey should be C-;)
6. Type "C-x C-s" to save changes.

*** helm-swoop code

#+BEGIN_SRC emacs-lisp
;; helm from https://github.com/emacs-helm/helm
(require 'helm)

;; Locate the helm-swoop folder to your path
(add-to-list 'load-path "~/.emacs.d/elisp/helm-swoop")
(require 'helm-swoop)

;; Change the keybinds to whatever you like :)
(global-set-key (kbd "M-i") 'helm-swoop)
(global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
(global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
(global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

;; When doing isearch, hand the word over to helm-swoop
(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
;; From helm-swoop to helm-multi-swoop-all
(define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
;; When doing evil-search, hand the word over to helm-swoop
;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
(define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

;; Move up and down like isearch
(define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
(define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;; Split direcion. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)

;; ;; Go to the opposite side of line from the end or beginning of line
(setq helm-swoop-move-to-line-cycle t)

;; Optional face for line numbers
;; Face name is `helm-swoop-line-number-face`
(setq helm-swoop-use-line-number-face t)

;; If you prefer fuzzy matching
(setq helm-swoop-use-fuzzy-match t)
#+END_SRC


* Web modes

** web-mode major mode loading
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

** indentation defaults
#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 4)
(setq web-mode-css-indent-offset 4)
(setq web-mode-code-indent-offset 4)
(setq web-mode-enable-current-element-highlight nil)
(setq web-mode-enable-current-column-highlight t)

(defun my-web-mode-auto-indent-hook ()
  (local-set-key (kbd "RET") 'newline-and-indent))

(add-hook 'web-mode-hook 'my-web-mode-auto-indent-hook)
#+END_SRC


** tide-mode (for typescript)
#+BEGIN_SRC emacs-lisp
(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))
#+END_SRC


* Project/Document Navigation
** ibuffer (better buffer list)
A better version of the default buffer list, which is enabled using "C-x C-b".
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** counsel-etags

To use counsel-etags, must create TAGS file in project home directory.
e.g. "ctags -e -R ." to recursively create tags.
     "ctags -e -R *.cpp *.hpp *.h" to filter specific extensions.
     "ctags -e myfile.cpp" to tag just one file.
In all cases the '-e' flag is required so that ctags will generate an emacs tags file.

#+BEGIN_SRC emacs-lisp
  ;; Use universal ctags to build the tags database for the project.
  ;; When you first want to build a TAGS database run 'touch TAGS'
  ;; in the root directory of your project.
  (use-package counsel-etags
    :ensure t
    :init
    (eval-when-compile
      ;; Silence missing function warnings
      (declare-function counsel-etags-virtual-update-tags "counsel-etags.el")
      (declare-function counsel-etags-guess-program "counsel-etags.el")
      (declare-function counsel-etags-locate-tags-file "counsel-etags.el"))
    :bind (
           ("M-." . counsel-etags-find-tag-at-point)
           ("M-t" . counsel-etags-grep-symbol-at-point))
    :config
    ;; Ignore files above 800kb
    (setq counsel-etags-max-file-size 800)
    ;; Ignore build directories for tagging
    (add-to-list 'counsel-etags-ignore-directories '"build*")
    (add-to-list 'counsel-etags-ignore-directories '".vscode")
    (add-to-list 'counsel-etags-ignore-filenames '".clang-format")
    ;; Don't ask before rereading the TAGS files if they have changed
    (setq tags-revert-without-query t)
    ;; Don't warn when TAGS files are large
    (setq large-file-warning-threshold nil)
    ;; How many seconds to wait before rerunning tags for auto-update
    (setq counsel-etags-update-interval 180)
    ;; Set up auto-update
    (add-hook
     'prog-mode-hook
     (lambda () (add-hook 'after-save-hook
                          (lambda ()
                            (counsel-etags-virtual-update-tags)))))

    ;; The function provided by counsel-etags is broken (at least on Linux)
    ;; and doesn't correctly exclude directories, leading to an excessive
    ;; amount of incorrect tags. The issue seems to be that the trailing '/'
    ;; in e.g. '*dirname/*' causes 'find' to not correctly exclude all files
    ;; in that directory, only files in sub-directories of the dir set to be
    ;; ignore.
    (defun my-scan-dir (src-dir &optional force)
      "Create tags file from SRC-DIR. \
     If FORCE is t, the commmand is executed without \
     checking the timer."
      (let* ((find-pg (or
                       counsel-etags-find-program
                       (counsel-etags-guess-program "find")))
             (ctags-pg (or
                        counsel-etags-tags-program
                        (format "%s -e -L" (counsel-etags-guess-program
                                            "ctags"))))
             (default-directory src-dir)
             ;; run find&ctags to create TAGS
             (cmd (format
                   "%s . \\( %s \\) -prune -o -type f -not -size +%sk %s | %s -"
                   find-pg
                   (mapconcat
                    (lambda (p)
                      (format "-iwholename \"*%s*\"" p))
                    counsel-etags-ignore-directories " -or ")
                   counsel-etags-max-file-size
                   (mapconcat (lambda (n)
                                (format "-not -name \"%s\"" n))
                              counsel-etags-ignore-filenames " ")
                   ctags-pg))
             (tags-file (concat (file-name-as-directory src-dir) "TAGS"))
             (doit (or force (not (file-exists-p tags-file)))))
        ;; always update cli options
        (when doit
          (message "%s at %s" cmd default-directory)
          (async-shell-command cmd)
          (visit-tags-table tags-file t))))

    (setq counsel-etags-update-tags-backend
          (lambda ()
            (interactive)
            (let* ((tags-file (counsel-etags-locate-tags-file)))
              (when tags-file
                (my-scan-dir (file-name-directory tags-file) t)
                (run-hook-with-args
                 'counsel-etags-after-update-tags-hook tags-file)
                (unless counsel-etags-quiet-when-updating-tags
                  (message "%s is updated!" tags-file))))))
    )

  (use-package flyspell-correct-ivy
    :ensure t
    :after (:all flyspell ivy))

  (use-package lsp-ivy
    :ensure t
    :diminish
    :after (:all lsp-mode ivy))

#+END_SRC


** neotree autorefresh
#+BEGIN_SRC emacs-lisp
(setq neo-autorefresh t)
#+END_SRC


* Search
** swiper (search current document)
Regexp search through current document with "C-s". Seems to require counsel.
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
(setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
;;(global-set-key (kbd "C-c C-r") 'ivy-resume)
;;(global-set-key (kbd "<f6>") 'ivy-resume)
;;(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;p(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;(global-set-key (kbd "<f1> l") 'counsel-find-library)
;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;(global-set-key (kbd "C-c g") 'counsel-git)
;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
;;(global-set-key (kbd "C-c k") 'counsel-ag)
;;(global-set-key (kbd "C-x l") 'counsel-locate)
;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  ;; (use-package swiper
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (ivy-mode 1)
  ;;     (setq ivy-use-virtual-buffers t)
  ;;     (global-set-key "\C-s" 'swiper)  ; this is the main command
  ;;     (global-set-key (kbd "C-c C-r") 'ivy-resume)  ; dunno what this does
  ;;     (global-set-key (kbd "<f6>") 'ivy-resume)
  ;;     (global-set-key (kbd "M-x") 'counsel-M-x)
  ;;     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;;     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;;     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;;     (global-set-key (kbd "<f1> l") 'counsel-load-library)
  ;;     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;;     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;;     (global-set-key (kbd "C-c g") 'counsel-git)
  ;;     (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;;     (global-set-key (kbd "C-c k") 'counsel-ag)
  ;;     (global-set-key (kbd "C-x l") 'counsel-locate)
  ;;     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  ;;     (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ;;     ))
#+END_SRC

** iedit (simultaneous editing)

Keybinding is "C-;".

Select a region, press C-;, and you will simultaneously edit
all matching regions in the document.

#+BEGIN_SRC emacs-lisp
(use-package iedit
    :ensure t)
#+END_SRC

** expand-region (progressively expand selection around cursor)

Keybinding is "C-=".

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** Narrow or widen region
Defines "C-x C-n" to narrow region around selection. 
If already in narrowed region, "C-x C-n" widens it again.
Useful for narrowing tools like 'swiper' or 'iedit' to smaller regions.
Credit goes to Artur Malabarba and Michael Fogleman.

#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, or
    defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  ;;(define-key endless/toggle-map "n"
  ;;  #'narrow-or-widen-dwim)

  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map "\C-xn"
                nil)))
#+END_SRC


