#+STARTUP overview

# Thanks to Mike Zamansky's Youtube series
# for introducing me to Emacs configuration.

* Basic Interface Tweaks
** Basic QoL
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)  ; no message on opening emacs
(tool-bar-mode -1)                ; no ugly toolbar at the top
(fset 'yes-or-no-p 'y-or-n-p)     ; can answer 'y/n' to prompts, instead of 'yes/no'
(setq save-interprogram-paste-before-kill t)   ; enables saving clipboard strings to emacs kill-ring
(global-set-key (kbd "<f5>") 'revert-buffer)   ; reload buffer
#+END_SRC
** Silence the Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function
      (lambda ()
        (let ((orig-fg (face-foreground 'mode-line)))
          (set-face-foreground 'mode-line "#F2804F")
          (run-with-idle-timer 0.1 nil
                               (lambda (fg) (set-face-foreground 'mode-line fg))
                               orig-fg))))
#+END_SRC
** Mouse and Keyboard Scroll one-line at a time
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(10))
;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't)       ; scroll window under mouse
(setq scroll-step 3)                     ; keyboard scroll 3 lines at a time
#+END_SRC
** Scroll window without moving cursor
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-n" "\C-u1\C-v")
(global-set-key "\M-p" "\C-u1\M-v")
#+END_SRC
** List command completions (which-key)
If you type "C-x" or "C-c" and wait which-key will list possible command completions.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
** Prevent accidental exiting
Quit with "C-x C-c C-x C-c" instead of "C-x C-c"
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-x C-c"))
  (global-set-key (kbd "C-x C-c C-x C-c") 'save-buffers-kill-emacs)
#+END_SRC


* Window Navigation
** Ace-window
Switch between multiple windows using "C-x o" by number.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    ;;; this next bit customizes font
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC
** Framemove
Use Shift + Arrowkeys to quickly switch windows.
#+BEGIN_SRC emacs-lisp
  (use-package framemove
    :ensure t
    :config
    (windmove-default-keybindings)
    (setq framemove-hook-into-windmove t)
    )
#+END_SRC


* General aesthetics
** One of my favorite themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config 
    (load-theme 'doom-vibrant t))
#+END_SRC

** Colored Parentheses (rainbow delimiters)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Default Fontsize
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 150)
#+END_SRC
** Default Cursor type
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'box)  ; other options: bar, hollow, hbar
#+END_SRC
** Highlight current line (hl-line)
Apparently hl-line.el is included from Emacs 21 onwards.
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** A light following your cursor around (beacon)
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    ;; Set beacon color with: (setq beacon-color ^#666)
    )
#+END_SRC


* Org Mode
** Org-mode Setup
Org-mode is an Emacs major mode that does a lot of different things.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)  ; indents nested bullet points
    (add-hook 'org-shiftup-final-hook 'windmove-up)              ; Shift + Up to move up a window
    (add-hook 'org-shiftleft-final-hook 'windmove-left)          ; Shift + Left to move to left window
    (add-hook 'org-shiftdown-final-hook 'windmove-down)          ; Shift + Down to move down a window
    (add-hook 'org-shiftright-final-hook 'windmove-right)        ; Shift + Right to move to right window
    )
#+END_SRC
** Org-bullets (aesthetic)
Shows org-mode bullets as UTF-8 characters instead of asterisks.
Only works in GUI emacs - may not work in terminal.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC


* Code Editing
** Set default indentation style
#+BEGIN_SRC emacs-lisp
(setq c-default-style "bsd"
        c-basic-offset 4)
#+END_SRC

** Code Snippets (yasnippet)
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC

** Code Folding (vimish-fold)
#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :ensure t
    :config
    (progn
      (vimish-fold-global-mode 1)
      (global-set-key (kbd "C-M-x") #'vimish-fold)
      (global-set-key (kbd "C-M-d") #'vimish-fold-delete)
      (global-set-key (kbd "C-M-c") #'vimish-fold-toggle)
      (global-set-key (kbd "C-M-f") #'vimish-fold-toggle-all)
      ))
#+END_SRC

** Lua mode
#+BEGIN_SRC emacs-lisp
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+END_SRC

** Web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
	  '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
	  '(("css" . (ac-source-css-property))
	    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
#+END_SRC

** Add .tpp to C++ mode
A .tpp file is usually used to store templates.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tpp" . c++-mode))
#+END_SRC

** Line numbers (linum-mode)
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(setq linum-format "%d")

(defun nolinum ()
  (global-linum-mode 0)
)
(add-hook 'org-mode-hook 'nolinum)
#+END_SRC

** Column numbers
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
** Aggressive indentation (aggressive-indent)
Indenting one line should indent lines below it too.
Disabled for modes where it wouldn't make sense, like python-mode.
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC

** simple auto-complete (auto-complete)
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC


* Project/Document Navigation
** Better buffer list (ibuffer)
A better version of the default buffer list, which is enabled using "C-x C-b".
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC
** Project Management (projectile)
#+BEGIN_SRC emacs-lisp
(use-package projectile
   :ensure t
   :config
   (projectile-global-mode)
   (setq projectile-completion-system 'ivy))
(use-package counsel-projectile
   :ensure t
   :config
   (counsel-projectile-mode))
#+END_SRC


* Search and Replace 
** Kill-ring search (counsel)
Search through your kill-ring history.
Also seems to be required for swiper.
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind ("M-y" . counsel-yank-pop)
  )
#+END_SRC

** Document search (swiper)
Regexp search through current document with "C-s". Seems to require counsel.
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)  ; this is the main command
    (global-set-key (kbd "C-c C-r") 'ivy-resume)  ; dunno what this does
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
** Screen search (avy)
Avy searches only text visible on the current screen.
It is based on ace-jump-mode from vim. Enable it using "M-s".
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC
** Simultaneous editing of regexp (iedit)
#+BEGIN_SRC emacs-lisp
(use-package iedit
    :ensure t)
#+END_SRC

** Search undo history (undo-tree)
Activate using "C-x u"
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode 1))
#+END_SRC


* Selection
** Progressively expand selection around cursor (expand-region)
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
** Narrow or widen region
Defines "C-x C-n" to narrow region around selection. 
If already in narrowed region, "C-x C-n" widens it again.
Useful for narrowing tools like 'swiper' or 'iedit' to smaller regions.
Credit goes to Artur Malabarba and Michael Fogleman.

#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, or
    defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  ;;(define-key endless/toggle-map "n"
  ;;  #'narrow-or-widen-dwim)

  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map "\C-xn"
                nil)))
#+END_SRC


* LaTeX in Emacs
** Put pdflatex in PATH (specialized to MAC)
#+BEGIN_SRC emacs-lisp
  (getenv "PATH")
  (setenv "PATH"
          (concat
           "/Library/TeX/texbin/" ":"
	   "/usr/local/bin" ":"
           "/usr/local/lib/pkgconfig" ":" 
           "/opt/X11/lib/pkgconfig" ":"
           (getenv "PATH")
	   )
)
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

** pdf-tools
Install epdfinfo via 'brew install pdf-tools' and then install the
pdf-tools elisp via the use-package below. To upgrade the epdfinfo
server, just do 'brew upgrade pdf-tools' prior to upgrading to newest
pdf-tools package using Emacs package system. If things get messed
up, just do 'brew uninstall pdf-tools', wipe out the elpa
pdf-tools package and reinstall both as at the start.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables
    '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
(pdf-tools-install)
#+END_SRC

** pdf-view with AucTeX
#+BEGIN_SRC emacs-lisp
 ;; to use pdfview with auctex
 (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
    TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

 ;; to have the buffer refresh after compilation
 (add-hook 'TeX-after-compilation-finished-functions
        #'TeX-revert-document-buffer)
#+END_SRC

** Enable org-table in LaTeX
Note: 'latex-mode-hook is Emacs' in-built LaTeX, while 'LaTeX-mode-hook is AucTeX.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-orgtbl)
  (add-hook 'LaTeX-mode-hook 'orgtbl-mode)
#+END_SRC


* Miscellany
** try
Lets you try out packages temporarily with "M-x try"
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

** load-file
A function that loads an elipso file only if it exists and is readable
e.g. (load-if-exists "~/Dropbox/shared/mu4econfig.el")
#+BEGIN_SRC emacs-lisp
  (defun load-if-exists (f)
      "loads the elisp file only if it exists and is readable"
      (if (file-readable-p f)
	  (load-file f)))
#+END_SRC

** Neo-tree
#+BEGIN_SRC emacs-lisp
(use-package neotree
   :ensure t
   :config
   (global-set-key [f8] 'neotree-toggle)
   (setq neo-smart-open t)
   (setq projectile-switch-project-action 'neotree-projectile-action))
#+END_SRC

** imenu
#+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-.") #'helm-imenu-anywhere)
#+END_SRC


* Unfinished, incomplete or possibly redundant
** Smooth Scroll
#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll
:ensure t
:config
  (smooth-scroll-mode 1)
  (setq smooth-scroll/vscroll-step-size 5)
  )
#+END_SRC

** (INCOMPLETE) reveal.js
#+BEGIN_SRC emacs-lisp
;;;(use-package ox-reveal
;;;:ensure ox-reveal)

;;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
;;;(setq org-reveal-mathjax t)

;;;(use-package htmlize
;;;:ensure t)
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
;;;  (use-package flycheck
;;;    :ensure t
;;;    :init
;;;    (global-flycheck-mode t))
#+END_SRC
** Python Jedi

#+BEGIN_SRC emacs-lisp
;;;  (use-package jedi
;;;    :ensure t
;;;    :init
;;;    (add-hook 'python-mode-hook 'jedi:setup)
;;;    (add-hook 'python-mode-hook 'jedi:ac-setup))
;;;  (use-package elpy
;;;    :ensure t
;;;    :config
;;;    (elpy-enable))
#+END_SRC




























** Dumb jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
  :ensure
  :init
  (dumb-jump-mode))
#+END_SRC



** Python indent guide
#+BEGIN_SRC emacs-lisp
 ;;; (use-package indent-guide
   ;;; :ensure t
   ;;; :config (indent-guide-global-mode))
#+END_SRC
   






