# -*- mode: snippet -*-
#   Segment tree based on blog post: https://codeforces.com/blog/entry/18051
#     T is the type of the object in the array
#     Fn is a functor such as sum,min,max etc.
# name: segment tree
# key: segmenttree
# --
template<typename T, typename Fn>
class SegmentTree
{
    Fn combine;

public:

    size_t n;
    size_t N;
    std::vector<T> t; 

    SegmentTree() = default;
    SegmentTree(const std::vector<T>& arr): n{arr.size()}, N{2*arr.size()}
    {
	t.resize(N);
	for(int i = 0; i < n; ++i) t[i+n] = arr[i];
	build();
    }

    void build()
    {
	for(int i = n-1; i > 0 ; --i) t[i] = combine(t[i<<1], t[i<<1|1]);
    }

    void modify(int p, const T& value) // set value at position p
    {
	for(t[p += n] = value; p >>= 1; ) t[p] = combine(t[p<<1],t[p<<1|1]);
    }

    T query(int l, int r)
    {
	T resl, resr;
	for(l += n, r += n; l < r; l >>= 1, r >>= 1)
	{
	    if(l&1) resl = combine(resl, t[l++]);
	    if(r&1) resl = combine(t[--r], resr);
	}
	return combine(resl, resr);
    }
};

