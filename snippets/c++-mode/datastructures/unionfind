# -*- mode: snippet -*-
# name: unionfind
# key: unionfind
# --
struct UnionFind
{
    int n; 
    int num_components;
    std::vector<int> parent;
    std::vector<int> size;
    
    UnionFind() = default;
    UnionFind(int n): n{n}, num_components{n}, size{std::vector<int>(n, 1)}
    {
	parent.resize(n);
	std::iota(parent.begin(), parent.end(), 0);
    }

    int find(int v) 
    {
	int root = v;
	while(root != parent[root]) root = parent[root];

	while(v != root) // path compression
	{
	    int next = parent[v];
	    parent[v] = root;
	    v = next;
	}
	return root;
    }
    bool is_connected(int a, int b)
    {
	return find(a) == find(b);
    }
    int component_size(int v)
    {
	return size[find(v)];
    }
    void unify(int a, int b)
    {
	a = find(a);
	b = find(b);
	if(a == b) return;

	if(size[a] < size[b])
	{
	    size[b] += size[a];
	    parent[a] = b;
	}
	else
	{
	    size[a] += size[b];
	    parent[b] = a;
	}
	num_components--;
    }
};

